name: Refresh NASA Data

on:
  schedule:
    - cron: "*/15 * * * *"  # Runs every 15 minutes
  workflow_dispatch:        # Allows manual triggering

jobs:
  fetch_and_insert:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Ensure this matches your local Python version

      # Step 3A: Attempt to Install Microsoft ODBC Driver using Direct Download
      - name: Install Microsoft ODBC Driver 18 for SQL Server via Direct Download
        run: |
          # Define the URL for the ODBC Driver 18 MSI installer
          $msiUrl = 'https://go.microsoft.com/fwlink/?linkid=2280794'  # Ensure this is up-to-date
          
          # Define the path where the MSI will be downloaded
          $msiPath = "$env:TEMP\msodbcsql18.msi"

          Write-Host "Downloading Microsoft ODBC Driver 18 for SQL Server from $msiUrl"
          
          # Download the MSI installer
          Invoke-WebRequest -Uri $msiUrl -OutFile $msiPath -UseBasicParsing

          Write-Host "Installing Microsoft ODBC Driver 18 for SQL Server"
          
          # Install the MSI silently with logging
          $logPath = "$env:TEMP\msodbcsql18_install.log"
          Start-Process msiexec.exe -ArgumentList "/i `"$msiPath`" /quiet /norestart /log `"$logPath`"" -Wait -NoNewWindow

          Write-Host "Installation complete. Log available at $logPath"

          # Display the last few lines of the log for debugging
          Get-Content $logPath -Tail 20

          # Remove the MSI installer after installation
          Remove-Item $msiPath -Force

          # Verify installation using Registry
          $driverName = 'ODBC Driver 18 for SQL Server'
          $registryPath = 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers'
          $installed = Get-ItemProperty -Path $registryPath -Name $driverName -ErrorAction SilentlyContinue

          if ($installed.$driverName -eq 'Installed') {
            Write-Host "$driverName has been successfully installed."
          } else {
            Write-Error "Failed to install $driverName via direct download."
            exit 1
          }
        shell: powershell

      # Step 3B: If Direct Download Fails, Attempt Installation via Winget
      - name: Install Microsoft ODBC Driver 18 for SQL Server via Winget
        if: failure()  # This step runs only if the previous step fails
        run: |
          Write-Host "Attempting to install Microsoft ODBC Driver 18 for SQL Server using Winget"
          winget install --id Microsoft.ODBC.Driver.18.for.SQL.Server -e --silent
          
          # Verify installation using Registry
          $driverName = 'ODBC Driver 18 for SQL Server'
          $registryPath = 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers'
          $installed = Get-ItemProperty -Path $registryPath -Name $driverName -ErrorAction SilentlyContinue

          if ($installed.$driverName -eq 'Installed') {
            Write-Host "$driverName has been successfully installed via Winget."
          } else {
            Write-Error "Failed to install $driverName via Winget."
            exit 1
          }
        shell: powershell

      # Step 4: Install Python dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: powershell

      # Step 5: Run the Python script
      - name: Run Script
        env:
          NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
          DB_DRIVER: ${{ secrets.DB_DRIVER }}
          DB_SERVER: ${{ secrets.DB_SERVER }}  # Preferably use IP address
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          python fetch_and_insert_nasa_data.py
        shell: powershell
