name: Refresh NASA Data

on:
  schedule:
    - cron: "*/15 * * * *"  # Runs every 15 minutes
  workflow_dispatch:        # Allows manual triggering

jobs:
  fetch_and_insert:
    runs-on: windows-latest  # Consider using self-hosted runners if SQL Server is not publicly accessible

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Ensure this matches your local Python version

      # Step 3: Install Python dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: powershell

      # Step 4: Test SQL Server Connectivity
      - name: Test SQL Server Connectivity
        shell: powershell
        run: |
          $server = "192.168.2.152"    # Replace with actual server name or IP address
          $port = "1433"       # Ensure this is the correct port
          $result = Test-NetConnection -ComputerName $server -Port $port
          $result | Format-List *
          if (-not $result.TcpTestSucceeded) {
            Write-Error "Cannot connect to SQL Server at $server on port $port."
          }

      # Step 5: Run the Python script
      - name: Run Script
        env:
          NASA_API_KEY: 3cDkIePArsYkyDlDbnBM1DHGkeUbWqVme0asj27W
          DB_DRIVER: "{ODBC Driver 17 for SQL Server}"
          DB_SERVER: 192.168.2.152
          DB_PORT: 1433
          DB_DATABASE: nasa_db
          DB_USERNAME: sa
          DB_PASSWORD: ummalter
        shell: powershell
        run: |
          # Print available ODBC drivers for debugging
          python -c "import pyodbc; print('Available ODBC Drivers:', pyodbc.drivers())"
          
          # Run the main Python script
          python fetch_and_insert_nasa_data.py
